Make python guide as I go along

Lab 5 and 6 Converted perfectly

Lab 7 completed. 

8 completed. Not a great lab though

Lab 9 worked almost perfectly, but some of the sympy equations are slightly different

Lab 10 I have no idea how to approach, major rework (maybe use voxels?)

Lab 11 Converted successfully, but need data to match the mathematica book

Lab 12 In progress, need some test data to figure out if code even works, write out instructions for imagej, curve_fit
    On hold until I have some actual data, hard to finish the remaining parts without it.

Lab 13 Theory copied well, Entire section on animations. Not sure how best to do this. Possibly use manim(?), but this is not necessarily easy. Lab is finished, aside from animations.

Lab 14 done. Mystifiying, on PLC computers, > sym.simplify(Driver Oscillator(answer, solution[0], \gamma, \omega, t))  evaluates to some insane equation instead of 0 as expected.

Lab 15 needs data (actually maybe just fake some data for the theory, it's just to show you can import). problem with Curve_fit needs adjusting, in Phase2: Simple Harmoic Motion. Really need some data or to gen some data for the damped part, half done at the moment. Otherwise complete

Lab 16 stuck on Differential equations part. Need to make figures

Lab 17, contour plots aren't working properly, might need to manually input results of integration. Figures.

Lab 18, Figures and pictures, will need to collect these from plc. Potential calculations are way off for some reason.

Lab 19, figures and pictures. Otherwise complete

Lab 20, might need to check the std deviation cacluation, needs pictures, might need to be more explicit about how to import scipy.optimize.curve_fit. Otherwise complete

Lab 21, basically done, might need to include something about MacProData or whatever it was called

notes:
When using paramaters use curve_fit
Always use mathjax printing: sym.init_printing(use_latex = "mathjax")